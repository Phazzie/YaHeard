{"version":3,"file":"security-C7mvuoNL.js","sources":["../../../.svelte-kit/adapter-node/chunks/security.js"],"sourcesContent":["import { v as validateConsensusResult } from \"./transcription.js\";\nconst CONSENSUS_CONFIG = {\n  /** Threshold for determining agreement between services (as percentage of average text length) */\n  AGREEMENT_THRESHOLD: 0.3,\n  /** Processing time threshold for \"fast\" services (milliseconds) */\n  FAST_PROCESSING_THRESHOLD: 5e3,\n  /** Processing time threshold for \"slow\" services (milliseconds) */\n  SLOW_PROCESSING_THRESHOLD: 1e4,\n  /** Decision factor weights for consensus calculation */\n  DECISION_WEIGHTS: {\n    TEXT_SIMILARITY: 0.7,\n    CONFIDENCE_SCORE: 0.2,\n    PROCESSING_SPEED: 0.1\n  },\n  /** Similarity algorithm weights for enhanced comparison */\n  SIMILARITY_WEIGHTS: {\n    JACCARD_WEIGHT: 0.6,\n    // Word-level similarity weight\n    LEVENSHTEIN_WEIGHT: 0.4\n    // Character-level similarity weight\n  }\n};\nconst PERFORMANCE_CONFIG = {\n  /** Maximum file size allowed for upload (bytes) - from original config */\n  MAX_FILE_SIZE_BYTES: 25 * 1024 * 1024,\n  // 25MB - Vercel limit\n  /** Timeout for individual AI service processing (milliseconds) */\n  SERVICE_TIMEOUT_MS: 45e3,\n  // 45 seconds - optimized for AI service response times\n  /** Maximum number of reasoning steps to store */\n  MAX_REASONING_STEPS: 100,\n  /** Memory threshold for large object warnings (bytes) */\n  LARGE_OBJECT_THRESHOLD: 1024 * 1024\n  // 1MB\n};\nclass ConsensusComparisonEngine {\n  compareTranscriptions(results) {\n    if (!results || results.length === 0) {\n      throw new Error(\"No valid transcription results provided for comparison.\");\n    }\n    if (results.length === 1) {\n      return this.createSingleResultConsensus(results[0]);\n    }\n    const validResults = results.filter((r) => typeof r.text === \"string\" && r.text.length > 0);\n    if (validResults.length === 0) {\n      throw new Error(\"All transcription results were empty or invalid.\");\n    }\n    const consensusText = this.calculateConsensusText(validResults);\n    const winningResult = validResults.find((r) => r.text === consensusText);\n    if (!winningResult) {\n      throw new Error(\"Consensus calculation failed: No winning result found.\");\n    }\n    const consensusConfidence = this.calculateConsensusConfidence(validResults, consensusText);\n    const disagreements = this.findDisagreements(validResults, consensusText);\n    const stats = this.calculateStats(validResults, disagreements);\n    const reasoning = this.buildReasoning(validResults, winningResult, consensusText, disagreements);\n    const consensusResult = {\n      finalText: consensusText,\n      consensusConfidence,\n      individualResults: validResults,\n      disagreements,\n      stats,\n      reasoning\n    };\n    if (!validateConsensusResult(consensusResult)) {\n      console.warn(\"Consensus result failed validation\", consensusResult);\n      throw new Error(\"Generated an invalid ConsensusResult object.\");\n    }\n    return consensusResult;\n  }\n  createSingleResultConsensus(result) {\n    const stats = {\n      totalProcessingTimeMs: result.processingTimeMs,\n      servicesUsed: 1,\n      averageConfidence: result.confidence ?? 0,\n      disagreementCount: 0\n    };\n    const reasoning = {\n      finalReasoning: \"Selected the only available transcription result.\",\n      steps: [{ stepNumber: 1, description: \"Only one valid result was provided, so it was chosen as the consensus.\" }]\n    };\n    return {\n      finalText: result.text,\n      consensusConfidence: result.confidence ?? 0.75,\n      // Default confidence for a single result\n      individualResults: [result],\n      disagreements: [],\n      stats,\n      reasoning\n    };\n  }\n  /**\n   * Calculates the consensus text using a similarity-first approach.\n   */\n  calculateConsensusText(results) {\n    const resultsWithScores = results.map((candidate) => {\n      const otherResults = results.filter((r) => r.id !== candidate.id);\n      const totalSimilarity = otherResults.reduce((sum, other) => {\n        return sum + this.calculateEnhancedSimilarity(candidate.text, other.text);\n      }, 0);\n      const averageSimilarity = otherResults.length > 0 ? totalSimilarity / otherResults.length : 1;\n      return {\n        text: candidate.text,\n        serviceName: candidate.serviceName,\n        id: candidate.id,\n        confidence: candidate.confidence,\n        averageSimilarity\n      };\n    });\n    resultsWithScores.sort((a, b) => {\n      if (a.averageSimilarity !== b.averageSimilarity) {\n        return b.averageSimilarity - a.averageSimilarity;\n      }\n      const confidenceA = a.confidence ?? 0;\n      const confidenceB = b.confidence ?? 0;\n      if (confidenceB !== confidenceA) {\n        return confidenceB - confidenceA;\n      }\n      return a.serviceName.localeCompare(b.serviceName);\n    });\n    return resultsWithScores[0].text;\n  }\n  /**\n   * Calculates a weighted confidence score for the consensus text.\n   */\n  calculateConsensusConfidence(results, winningText) {\n    const winningResult = results.find((r) => r.text === winningText);\n    const otherResults = results.filter((r) => r.text !== winningText);\n    const averageSimilarity = otherResults.reduce((sum, other) => {\n      return sum + this.calculateEnhancedSimilarity(winningText, other.text);\n    }, 0) / (otherResults.length || 1);\n    const winnerConfidence = winningResult.confidence;\n    const similarityComponent = averageSimilarity * CONSENSUS_CONFIG.DECISION_WEIGHTS.TEXT_SIMILARITY;\n    const confidenceComponent = (winnerConfidence ?? this.getAverageConfidence(results)) * CONSENSUS_CONFIG.DECISION_WEIGHTS.CONFIDENCE_SCORE;\n    const processingScore = this.calculateProcessingScore(winningResult.processingTimeMs);\n    const speedComponent = processingScore * CONSENSUS_CONFIG.DECISION_WEIGHTS.PROCESSING_SPEED;\n    return Math.min(1, similarityComponent + confidenceComponent + speedComponent);\n  }\n  findDisagreements(results, winningText) {\n    return results.filter((r) => r.text !== winningText).map((r) => ({\n      position: 0,\n      // Simplified: disagreement is for the whole text\n      serviceTexts: {\n        [r.serviceName]: r.text,\n        \"consensus\": winningText\n      },\n      severity: 1 - this.calculateEnhancedSimilarity(r.text, winningText)\n    })).filter((d) => d.severity > 1 - CONSENSUS_CONFIG.AGREEMENT_THRESHOLD);\n  }\n  calculateStats(results, disagreements) {\n    const averageConfidence = this.getAverageConfidence(results);\n    return {\n      totalProcessingTimeMs: Math.max(...results.map((r) => r.processingTimeMs)),\n      servicesUsed: results.length,\n      averageConfidence,\n      disagreementCount: disagreements.length\n    };\n  }\n  buildReasoning(results, winner, consensusText, disagreements) {\n    const steps = [];\n    steps.push({\n      stepNumber: 1,\n      description: `Started consensus process with ${results.length} valid transcription results.`,\n      data: { serviceNames: results.map((r) => r.serviceName) }\n    });\n    steps.push({\n      stepNumber: 2,\n      description: \"Calculated pairwise Levenshtein similarity for all results to find the best candidate.\"\n    });\n    steps.push({\n      stepNumber: 3,\n      description: `Selected text from \"${winner.serviceName}\" as the winner based on the highest average similarity score.`,\n      data: { winner: winner.serviceName, consensusText }\n    });\n    steps.push({\n      stepNumber: 4,\n      description: `Calculated final weighted consensus confidence score.`,\n      data: { weights: CONSENSUS_CONFIG.DECISION_WEIGHTS }\n    });\n    if (disagreements.length > 0) {\n      steps.push({\n        stepNumber: 5,\n        description: `Identified ${disagreements.length} disagreements with the consensus text.`,\n        data: { disagreementCount: disagreements.length }\n      });\n    }\n    const finalReasoning = `Selected text from \"${winner.serviceName}\" due to its high average similarity to other transcriptions. The final confidence score was weighted based on text similarity, the winner's own confidence, and processing speed.`;\n    return { finalReasoning, steps };\n  }\n  getAverageConfidence(results) {\n    const resultsWithConfidence = results.filter((r) => typeof r.confidence === \"number\");\n    if (resultsWithConfidence.length === 0) {\n      return 0;\n    }\n    const sum = resultsWithConfidence.reduce((acc, r) => acc + r.confidence, 0);\n    return sum / resultsWithConfidence.length;\n  }\n  calculateProcessingScore(processingTimeMs) {\n    if (processingTimeMs < CONSENSUS_CONFIG.FAST_PROCESSING_THRESHOLD) {\n      return 1;\n    }\n    if (processingTimeMs > CONSENSUS_CONFIG.SLOW_PROCESSING_THRESHOLD) {\n      return 0;\n    }\n    const range = CONSENSUS_CONFIG.SLOW_PROCESSING_THRESHOLD - CONSENSUS_CONFIG.FAST_PROCESSING_THRESHOLD;\n    const score = 1 - (processingTimeMs - CONSENSUS_CONFIG.FAST_PROCESSING_THRESHOLD) / range;\n    return score;\n  }\n  calculateLevenshteinSimilarity(a, b) {\n    if (!a || !b) return 0;\n    const maxLength = Math.max(a.length, b.length);\n    if (maxLength === 0) return 1;\n    const distance = this.levenshteinDistance(a.toLowerCase(), b.toLowerCase());\n    return (maxLength - distance) / maxLength;\n  }\n  /**\n   * Calculates Jaccard similarity using word-level overlap detection.\n   * This provides superior accuracy for transcription consensus by comparing\n   * word sets rather than character sequences.\n   */\n  calculateJaccardSimilarity(a, b) {\n    if (!a || !b) return 0;\n    if (a === b) return 1;\n    const wordsA = new Set(a.toLowerCase().split(/\\s+/).filter((word) => word.length > 0));\n    const wordsB = new Set(b.toLowerCase().split(/\\s+/).filter((word) => word.length > 0));\n    if (wordsA.size === 0 && wordsB.size === 0) return 1;\n    if (wordsA.size === 0 || wordsB.size === 0) return 0;\n    const intersection = new Set([...wordsA].filter((word) => wordsB.has(word)));\n    const union = /* @__PURE__ */ new Set([...wordsA, ...wordsB]);\n    return intersection.size / union.size;\n  }\n  /**\n   * Enhanced similarity calculation combining Levenshtein and Jaccard similarities.\n   * Uses configurable weighted approach from CONSENSUS_CONFIG\n   */\n  calculateEnhancedSimilarity(a, b) {\n    const jaccardSim = this.calculateJaccardSimilarity(a, b);\n    const levenshteinSim = this.calculateLevenshteinSimilarity(a, b);\n    const { JACCARD_WEIGHT, LEVENSHTEIN_WEIGHT } = CONSENSUS_CONFIG.SIMILARITY_WEIGHTS;\n    return jaccardSim * JACCARD_WEIGHT + levenshteinSim * LEVENSHTEIN_WEIGHT;\n  }\n  levenshteinDistance(a, b) {\n    const matrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));\n    for (let i = 0; i <= a.length; i++) {\n      matrix[0][i] = i;\n    }\n    for (let j = 0; j <= b.length; j++) {\n      matrix[j][0] = j;\n    }\n    for (let j = 1; j <= b.length; j++) {\n      for (let i = 1; i <= a.length; i++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        matrix[j][i] = Math.min(\n          matrix[j][i - 1] + 1,\n          matrix[j - 1][i] + 1,\n          matrix[j - 1][i - 1] + cost\n        );\n      }\n    }\n    return matrix[b.length][a.length];\n  }\n}\nfunction getClientIP(request) {\n  const xff = request.headers.get(\"x-forwarded-for\");\n  if (xff) return xff.split(\",\")[0].trim();\n  const xri = request.headers.get(\"x-real-ip\");\n  if (xri) return xri.trim();\n  return null;\n}\nfunction checkRateLimit(clientIP) {\n  return { allowed: true };\n}\nfunction validateCsrfFromForm(formData, csrfCookie) {\n  const csrfToken = formData.get(\"csrfToken\") || \"\";\n  return Boolean(csrfCookie) && csrfToken === csrfCookie;\n}\nfunction validateCsrfFromJson(body, csrfCookie) {\n  const csrfToken = body?.csrfToken || \"\";\n  return Boolean(csrfCookie) && csrfToken === csrfCookie;\n}\nexport {\n  ConsensusComparisonEngine as C,\n  PERFORMANCE_CONFIG as P,\n  validateCsrfFromForm as a,\n  checkRateLimit as c,\n  getClientIP as g,\n  validateCsrfFromJson as v\n};\n"],"names":[],"mappings":"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"}